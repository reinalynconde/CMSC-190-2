#!/usr/bin/env node
const delay = require('delay');
const worker = require("streaming-worker");
const through = require('through');
const path = require("path");
var fs = require('fs');
const sqlite3 = require('sqlite3').verbose();
const addon = path.join(__dirname, '../build/Release/addon');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('origami:server');
var http = require('http');

/**
 * Get port from environment and store in Express.

 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Get details
 */

function getDetails(folder, user) {
  var db = new sqlite3.Database('db/origami.db', sqlite3.OPEN_READWRITE,
    (err) => {
    if(err) {
      return console.log("Error has occured!\n" + err.message);
    }

    console.log("Connected to the database");
  });

  var ret = {};

  db.get(`SELECT * FROM progress WHERE user = ?`, [user], (err, row) => {
    if (err) {
      db.close();
      return console.error(err.message);
    }

    if(row){
      console.log(row);
      ret.progress = row.progress;
      ret.percent = row.percent;
      ret.step = row.step;
      ret.folder = row.user;
      ret.ind = "uploads/" + folder + "/";
      ret.out = ind + "output";
      db.close();
      return ret;
    }
  });
}


/** 
 * Add socket.io
 */
var progress = "";
var perc;
var step = 0;
var newjson = {}
const io = require('socket.io')(server, {
  pingTimeout: 3600000,
  pingInterval: 60000
});

io.on('connection', (socket) => {
  var has_model = "no";
  var user;
  var folder;
  var ind;
  var out;
  var x = 3;
  // Log whenever a user connects
  console.log('user connected: ' + socket.id);

  // Log whenever a client disconnects from our websocket server
  socket.on('disconnect', function(reason){
    console.log('user disconnected: ' + socket.id);
    console.log('reason: ' + reason);
  });

  // When we receive a 'message' event from our client, print out
  // the contents of that message and then echo it back to our client
  // using `io.emit()`
  socket.on('message', (message) => {
    if(message == "dc"){
      console.log(message + " " + has_model);
      socket.emit('message', has_model);
    } else {
      console.log("current user: " + message);
      user = message;
      folder = message;
      ind = "uploads/" + folder + "/";
      out = ind + "/output";


      /*var ret = getDetails(folder, user);
      var y = 100;

      while(!ret || y > 0) {
        if(!ret) {
          console.log(y);
          y--;
        } else {
          progress = ret.progress;
          percent = ret.percent;
          step = ret.step;
          folder = ret.folder;
          ind = ret.ind;
          out = ret.out;
        }
      }

      if(step > 0 && step < 6) {
	socket.emit('message', 'ongoing');
      }*/


      console.log("COMMENCE!!!");
      //basic C++ run:
      const commence = worker(addon, {
        "inputDir": ind,
        "outputDir": out,
        "user": folder
      });

      commence.from.on('progress', function(sample){
        console.log("----------- Event -----------");
        console.log(JSON.parse(sample));

        if(JSON.parse(sample).progress == "done") {
          const { spawn } = require('child_process');
          const finish = spawn('/home/ubuntu/lib/openMVG_Build/Linux-x86_64-RELEASE/openMVG_main_IncrementalSfM',
              ["-i", "uploads/"+ folder + "/output/sfm_data.json",
              "-m", "uploads/" + folder + "/output/",
              "-o", "uploads/" + folder + "/output/"]);

          newjson = {
            "user": folder,
            "progress": "Creating Sparse Point Cloud...",
            "percent": 1,
            "step": 4
          }

          socket.emit('message', newjson);

          /*var db = new sqlite3.Database('db/origami.db', sqlite3.OPEN_READWRITE,
            (err) => {
            if(err) {
              return console.log("Error has occured!\n" + err.message);
            }

            console.log("Connected to the database");
          });

          db.run(`UPDATE progress SET progress = ?, percent = ?, step = ? WHERE user = ?`,
            [newjson.progress, newjson.perc, newjson.step, newjson.user],
            function(err) {
              if(err) return console.log(err.message);
              console.log('Row updated!');
           });

           db.close();*/

          finish.stdout.on('data', (data) => {
            console.log(`stdout: ${data}`);
	    x = x + 3;
            if(x >= 83) x = 82;
            newjson = {
              "user": folder,
   	      "progress": "Adding Points",
              "percent": x,
              "step": 4
            }

            /*var db = new sqlite3.Database('db/origami.db', sqlite3.OPEN_READWRITE,
              (err) => {
              if(err) {
                return console.log("Error has occured!\n" + err.message);
              }

              console.log("Connected to the database");
            });

            db.run(`UPDATE progress SET progress = ?, percent = ?, step = ? WHERE user = ?`,
              [newjson.progress, newjson.perc, newjson.step, newjson.user],
              function(err) {
                if(err) return console.log(err.message);
                console.log('Row updated!');
            });

            db.close();*/
          });

          finish.stderr.on('data', (data) => {
            console.log(`stderr: ${data}`);
          });

          

          finish.on('close', (code) => {
            const { spawn } = require('child_process');
            const convertToOpenMVS =
              spawn('/home/ubuntu/lib/openMVG_Build/Linux-x86_64-RELEASE/openMVG_main_openMVG2openMVS',
                ["-i", "uploads/"+ folder + "/output/sfm_data.bin",
                "-o", "uploads/" + folder + "/output/scene.mvs"]);

            newjson = {
              "user": folder,
              "progress": "Converting to OpenMVS",
              "percent": 2,
              "step": 5
            }

            socket.emit('message', newjson);

	    /*var db = new sqlite3.Database('db/origami.db', sqlite3.OPEN_READWRITE,
              (err) => {
              if(err) {
                return console.log("Error has occured!\n" + err.message);
              }

              console.log("Connected to the database");
            });

            db.run(`UPDATE progress SET progress = ?, percent = ?, step = ? WHERE user = ?`,
              [newjson.progress, newjson.perc, newjson.step, newjson.user],
              function(err) {
                if(err) return console.log(err.message);
                console.log('Row updated!');
             });

            db.close();*/

            convertToOpenMVS.stdout.on('data', (data) => {
              console.log(`stdout: ${data}`);
            });

            convertToOpenMVS.stderr.on('data', (data) => {
              console.log(`stderr: ${data}`);
            });

            convertToOpenMVS.on('close', (code) => {
              console.log(`child process exited with code ${code}`);

              newjson = {
                "user": folder,
                "progress": "Densifying Point Cloud",
                "percent": 33,
                "step": 5
              }

              socket.emit('message', newjson);

              /*var db = new sqlite3.Database('db/origami.db', sqlite3.OPEN_READWRITE,
                (err) => {
                if(err) {
                  return console.log("Error has occured!\n" + err.message);
                }

                console.log("Connected to the database");
              });

              db.run(`UPDATE progress SET progress = ?, percent = ?, step = ? WHERE user = ?`,
                [newjson.progress, newjson.perc, newjson.step, newjson.user],
                function(err) {
                  if(err) return console.log(err.message);
                  console.log('Row updated!');
              });

              db.close();*/

              const densify =
                spawn('/home/ubuntu/lib/openMVS_Build/bin/DensifyPointCloud',
                  ["-i", "uploads/" + folder + "/output/scene.mvs",
                  "-o", "uploads/" + folder + "/output/dense"]);

              densify.stdout.on('data', (data) => {
                console.log(`stdout: ${data}`);
              });

              densify.stderr.on('data', (data) => {
                console.log(`stderr: ${data}`);
              });

              densify.on('close', (code) => {
                console.log(`child process exited with code ${code}`);

                newjson = {
                  "user": folder,
                  "progress": "Adding Mesh",
                  "percent": 66,
                  "step": 5
                }

                socket.emit('message', newjson);

                /*var db = new sqlite3.Database('db/origami.db', sqlite3.OPEN_READWRITE,
                  (err) => {
                  if(err) {
                    return console.log("Error has occured!\n" + err.message);
                  }

                  console.log("Connected to the database");
                });

                db.run(`UPDATE progress SET progress = ?, percent = ?, step = ? WHERE user = ?`,
                  [newjson.progress, newjson.perc, newjson.step, newjson.user],
                  function(err) {
                    if(err) return console.log(err.message);
                    console.log('Row updated!');
                });

                db.close();*/

                const mesh =
                  spawn('/home/ubuntu/lib/openMVS_Build/bin/ReconstructMesh',
                  ["-i", "uploads/" + folder + "/output/dense.mvs",
                  "-o", "uploads/" + folder + "/output/mesh",
                  "--export-type=obj"]);

                mesh.stdout.on('data', (data) => {
                  console.log(`stdout: ${data}`);
                });

                mesh.stderr.on('data', (data) => {
                  console.log(`stderr: ${data}`);
                });

                mesh.on('close', (code) => {
                  console.log(`child process exited with code ${code}`);

                  if(code == 0)
                    has_model = "yes";

                  newjson = {
                    "user": folder,
                    "progress": "done",
                    "percent": 100,
                    "step": 5
                  }
	          
 		  //step = 6;
                  socket.emit('message', newjson);

                  /*var db = new sqlite3.Database('db/origami.db', sqlite3.OPEN_READWRITE,
                    (err) => {
                    if(err) {
                      return console.log("Error has occured!\n" + err.message);
                    }
  
                    console.log("Connected to the database");
                  });

                  db.run(`UPDATE progress SET progress = ?, percent = ?, step = ? WHERE user = ?`,
                    [newjson.progress, newjson.perc, newjson.step, newjson.user],
                    function(err) {
                      if(err) return console.log(err.message);
                      console.log('Row updated!');
                  });

                  db.close();*/

                });
              });
            });
          });          
        } else
          socket.emit('message', JSON.parse(sample));

        console.log("-----------------------------");
      });
    }

  });

})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(bind);
}

