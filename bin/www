#!/usr/bin/env node
const delay = require('delay');
const worker = require("streaming-worker");
const through = require('through');
const path = require("path");
const addon = path.join(__dirname, '../build/Release/addon');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('origami:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/** 
 * Add socket.io
 */
var progress = "";
var perc;
var step = "";
const io = require('socket.io')(server, {
  pingTimeout: 3600000,
  pingInterval: 60000
});


io.on('connection', (socket) => {
  // Log whenever a user connects
  console.log('user connected: ' + socket.id);

  // Log whenever a client disconnects from our websocket server
  socket.on('disconnect', function(reason){
    console.log('user disconnected: ' + socket.id);
    console.log('reason: ' + reason);
  });

  // When we receive a 'message' event from our client, print out
  // the contents of that message and then echo it back to our client
  // using `io.emit()`
  socket.on('message', (message) => {
    if(message == "dc")
      console.log(message);
    else {
      console.log("current user: " + message);
      var user = message;

      var ind = "uploads/" + _user + "/";
      var out = ind + "output";

      console.log("COMMENCE!!!");
      //basic C++ run:
      const commence = worker(addon, {
        "inputDir": ind,
        "outputDir": out,
        "user": _user
      });

      commence.from.on('progress', function(sample){
        console.log("----------- Event -----------");
        console.log(JSON.parse(sample));
        socket.emit('message', JSON.parse(sample));
        // console.log(socket.id);

        console.log("-----------------------------");
      });

      // socket.emit('message', {text: "done", step: 4});
    }

  });

})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
